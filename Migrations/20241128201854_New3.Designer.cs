// <auto-generated />
using System;
using System.Collections.Generic;
using GameForge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameForge.Migrations
{
    [DbContext(typeof(GameForgeContext))]
    [Migration("20241128201854_New3")]
    partial class New3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameForge.Models.Answer", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("QuestionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("GameForge.Models.AnswerVote", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("boolean");

                    b.HasKey("QuestionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("AnswerVotes");
                });

            modelBuilder.Entity("GameForge.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartID"));

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("boolean");

                    b.HasKey("CartID", "UserID");

                    b.HasIndex("GameId");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("GameForge.Models.Collectables", b =>
                {
                    b.Property<int>("CollectableID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryID")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCollectables")
                        .HasColumnType("integer");

                    b.HasKey("CollectableID", "UserID");

                    b.HasIndex("LibraryID");

                    b.ToTable("Collectables");
                });

            modelBuilder.Entity("GameForge.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("GameplayLink")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("WishlistID")
                        .HasColumnType("integer");

                    b.Property<int?>("WishlistUserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("WishlistID", "WishlistUserID");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameForge.Models.Library", b =>
                {
                    b.Property<int>("LibraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LibraryID"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LibraryCreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("LibraryID");

                    b.HasIndex("GameId");

                    b.HasIndex("UserID");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("GameForge.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("GameForge.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<int>("LatestAnswerID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LatestAnswerTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfAnswers")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("QuestionID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("GameForge.Models.QuestionVote", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("boolean");

                    b.HasKey("QuestionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("QuestionVotes");
                });

            modelBuilder.Entity("GameForge.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTag", b =>
                {
                    b.Property<int>("ThreadTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThreadTagID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ThreadTagID");

                    b.ToTable("ThreadTags");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTopic", b =>
                {
                    b.Property<int>("ThreadTopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThreadTopicID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LatestReplyID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LatestReplyTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfReplies")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Tag")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ThreadTopicID");

                    b.HasIndex("UserID");

                    b.ToTable("ThreadTopic");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTopicReply", b =>
                {
                    b.Property<int>("ThreadTopicReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThreadTopicReplyID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentReplyID")
                        .HasColumnType("integer");

                    b.Property<int>("ThreadTopicID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ThreadTopicReplyID");

                    b.HasIndex("ParentReplyID");

                    b.HasIndex("ThreadTopicID");

                    b.HasIndex("UserID");

                    b.ToTable("ThreadTopicReplies");
                });

            modelBuilder.Entity("GameForge.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GameForge.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("WishlistID", "UserID");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("GameForge.Models.Developer", b =>
                {
                    b.HasBaseType("GameForge.Models.User");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("GameForge.Models.Answer", b =>
                {
                    b.HasOne("GameForge.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.AnswerVote", b =>
                {
                    b.HasOne("GameForge.Models.Question", "Question")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.Cart", b =>
                {
                    b.HasOne("GameForge.Models.Game", "game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("game");
                });

            modelBuilder.Entity("GameForge.Models.Collectables", b =>
                {
                    b.HasOne("GameForge.Models.Library", "library")
                        .WithMany()
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("library");
                });

            modelBuilder.Entity("GameForge.Models.Game", b =>
                {
                    b.HasOne("GameForge.Models.Developer", "Developer")
                        .WithMany("CreatedGames")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.Wishlist", null)
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistID", "WishlistUserID");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("GameForge.Models.Library", b =>
                {
                    b.HasOne("GameForge.Models.Game", "game")
                        .WithMany("Libraries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("game");
                });

            modelBuilder.Entity("GameForge.Models.Purchase", b =>
                {
                    b.HasOne("GameForge.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.Question", b =>
                {
                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.QuestionVote", b =>
                {
                    b.HasOne("GameForge.Models.Question", "Question")
                        .WithMany("QuestionVotes")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("QuestionVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.Review", b =>
                {
                    b.HasOne("GameForge.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTopic", b =>
                {
                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("ThreadTopics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTopicReply", b =>
                {
                    b.HasOne("GameForge.Models.ThreadTopicReply", "ParentReply")
                        .WithMany()
                        .HasForeignKey("ParentReplyID");

                    b.HasOne("GameForge.Models.ThreadTopic", "ThreadTopic")
                        .WithMany("ThreadTopidcReplies")
                        .HasForeignKey("ThreadTopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameForge.Models.User", "User")
                        .WithMany("ThreadTopicReplies")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentReply");

                    b.Navigation("ThreadTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameForge.Models.Game", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GameForge.Models.Question", b =>
                {
                    b.Navigation("AnswerVotes");

                    b.Navigation("Answers");

                    b.Navigation("QuestionVotes");
                });

            modelBuilder.Entity("GameForge.Models.ThreadTopic", b =>
                {
                    b.Navigation("ThreadTopidcReplies");
                });

            modelBuilder.Entity("GameForge.Models.User", b =>
                {
                    b.Navigation("AnswerVotes");

                    b.Navigation("Answers");

                    b.Navigation("QuestionVotes");

                    b.Navigation("Questions");

                    b.Navigation("ThreadTopicReplies");

                    b.Navigation("ThreadTopics");
                });

            modelBuilder.Entity("GameForge.Models.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("GameForge.Models.Developer", b =>
                {
                    b.Navigation("CreatedGames");
                });
#pragma warning restore 612, 618
        }
    }
}
